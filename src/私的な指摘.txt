よかった・・・こっちの勘違いで
ちょっと古いバージョンだけど

拡張性はなるべく残したつもりですが、主さんの考えに沿わない形になってたらごめんなさい。

要点
６、必要のないクラスPen　現状ではcanvasのオブジェクトを格納するだけで、オブジェクトが意味のない二重構造になる。
７、必要のないクラスRuler　DrawObjectの持つ[Pointオブジェクト]が同じ利用目的なので、必要ない。DrawObjectクラスに統合。
１３、DrawObject→Line　にし、Point(0D),Line(1D),TestCanvas(2D)に加えてSimulatorTest(実行)の役割を持たせる。




変更メモ
１、文字コードの関係で、日本語の文字は環境によってはコンパイルができない。コメント内容や標準出力。
	全部英語のクラスを作成してそれを継承して日本語コメントをつけるなど。

２、メソッド名に大文字が使われている。Pen#Draw()など。あまりよろしくない。
	クラス名を覚えていないとコンストラクタに見えてしまう。

３、SimulatorTest#Test()で、point→DrawObject→pen.Drawとオブジェクトを直接
	渡しており、クラス間の結合度が高いわりに、それぞれのクラスをオーバーロードを多用して汎化している。
	コピペコードが増えると修正が大変なので保守性も下がるし、文章量が多いので単純に読みにくい。

４、クラスの利用目的が明記されていない。READMEでもコメントでもいいのであると便利。

５、オブジェクトへの操作の種類でなく、オブジェクトで記述をまとめる。

６、必要のないクラスPen　現状ではcanvasのオブジェクトを格納するだけで、オブジェクトが意味のない二重構造になる。
	同時に、非推奨のメソッドを利用していた。コンパイル時に確認をしよう。

７、必要のないクラスRuler　DrawObjectの持つ[Pointオブジェクト]が同じ利用目的なので、必要ない。DrawObjectクラスに統合。

８、Point#gatStringPoint()は、クラス名でPointであることが明記されているのに繰り返している。
	また、クラスライブラリではこういったメソッドはtoString()と書かれることが多い。
	
９、クリアボタンの処理System.out.prntln("clear");は、消去と結びついているのでPaint#clearに移動

１０、TestCanvas#paintComponent()で表示を改善。もともと3-6-9と出力の行数が増えていたので、1行にまとめて軽減

１１、DrawObjectのコンストラクタをなくし、メソッドで解決(繰り返し処理のため)

１２、TestCanvasのコンストラクタで、CANVAS_X_MAX以外の値を設定できてはいけないので引数のあるものを削除
	また、Xと指定すると座標を意味してしまうのでWIDTH,HEIGHTに変更
	
１３、DrawObject→Line　にし、Point(0D),Line(1D),TestCanvas(2D)に加えてSimulatorTest(実行)の役割を持たせる。

１４、Point#getPointはint[]で返しているが、利用場面が少ないのでgetXとgetYに分割(クラス名とメソッド名が重複してもいる)

１５、現状では使用しないメソッドをコメントアウトしました。

他人のコードを見る機会なんてあまりないので、とても勉強になりました。ありがとうございます。
